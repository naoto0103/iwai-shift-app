# 岩井製菓シフト管理システム 開発進捗報告書

## 1. システム概要

### 1.1 プロジェクト目的
岩井製菓の店舗運営における人員配置の最適化と、シフト作成業務の効率化を図るための Windows デスクトップアプリケーションを開発しています。従業員がシフト希望を簡単に提出でき、管理者がそれを考慮したシフト作成を行えるようにします。また、勤怠管理機能も統合し、一元的な労務管理を実現します。

### 1.2 主要機能
- **管理者機能**
  - ダッシュボード (季節情報、イベント情報の表示)
  - シフト管理 (カレンダー表示、自動生成、編集)
  - 従業員管理 (情報登録・編集、スキル設定)
  - 店舗管理 (店舗情報、必要スキル設定)
  - イベント・季節情報管理
  - AIアシスタント (OpenAI APIによる対話型サポート)

- **従業員機能**
  - プロフィール管理
  - シフト希望入力
  - 勤怠管理 (出退勤・休憩打刻)

### 1.3 技術スタック
- フロントエンド: React + TypeScript
- デスクトップ実行環境: Electron
- 認証: Firebase Authentication
- データベース: Firestore
- 状態管理: React Context API
- AI機能: OpenAI API (GPT-4o)
- UI: Material-UI v7

## 2. 開発進捗状況

### 2.1 完了した開発項目

#### 2.1.1 インフラストラクチャ
- ✅ 開発環境の構築
- ✅ プロジェクトの初期化と基本設定
- ✅ Firebaseとの連携設定
- ✅ ルーティング設定

#### 2.1.2 認証・アクセス制御
- ✅ Firebase Authenticationの実装
- ✅ 認証状態の管理 (AuthContext)
- ✅ ユーザーロールによるアクセス制御
- ✅ ログイン/ログアウト機能

#### 2.1.3 データアクセス層
- ✅ Firestoreサービスの実装 (firestoreService.ts)
- ✅ ユーザー管理サービス (userService.ts)
- ✅ 店舗管理サービス (storeService.ts)
- ✅ シフト管理サービス (shiftService.ts)
- ✅ シフト希望管理サービス (shiftPreferenceService.ts)
- ✅ 勤怠管理サービス (attendanceService.ts)
- ✅ イベント・季節情報サービス (eventService.ts)
- ✅ AIアシスタントサービス (aiAssistantService.ts)

#### 2.1.4 共通UIコンポーネント
- ✅ Calendar.tsx (カレンダー表示コンポーネント)
- ✅ DataTable.tsx (データテーブル表示コンポーネント)
- ✅ Modal.tsx (モーダルダイアログコンポーネント)
- ✅ Card.tsx (情報カードコンポーネント)
- ✅ AIAssistant.tsx (AIアシスタントコンポーネント)
- ✅ ComponentTestPage.tsx (UI開発テスト用ページ)

### 2.2 現在の開発フェーズ

現在は、共通UIコンポーネントの実装を完了し、これらを組み合わせて実際のページコンポーネントを実装する段階に移行します。データコンテキストの実装とページコンポーネントの構築が次のステップです。

## 3. 現状のプロジェクトフォルダ構造

```
iwai-shift-app/
├── package.json                       // プロジェクト設定、依存関係
├── electron/                          // Electron関連ファイル
│   ├── main.js                        // Electronメインプロセス
│   └── preload.js                     // プリロードスクリプト
├── src/                               // Reactアプリケーションソース
│   ├── index.tsx                      // エントリーポイント
│   ├── App.tsx                        // ルートコンポーネント・ルーティング設定
│   ├── App.css                        // アプリスタイル
│   ├── assets/                        // 画像などの静的アセット
│   ├── components/                    // コンポーネント
│   │   ├── common/                    // 共通コンポーネント
│   │   │   ├── Layout.tsx             // レイアウト共通コンポーネント
│   │   │   ├── Sidebar.tsx            // サイドナビゲーション
│   │   │   ├── Calendar.tsx           // カレンダーコンポーネント
│   │   │   ├── DataTable.tsx          // データテーブルコンポーネント
│   │   │   ├── Modal.tsx              // モーダルダイアログコンポーネント
│   │   │   ├── Card.tsx               // 情報カードコンポーネント
│   │   │   └── AIAssistant.tsx        // AIアシスタントコンポーネント
│   │   ├── admin/                     // 管理者用コンポーネント (未実装)
│   │   └── employee/                  // 従業員用コンポーネント (未実装)
│   ├── contexts/                      // Reactコンテキスト
│   │   └── AuthContext.tsx            // 認証コンテキスト
│   ├── pages/                         // ページコンポーネント
│   │   ├── Login.tsx                  // ログイン画面
│   │   ├── ComponentTestPage.tsx      // UI開発テスト用ページ
│   │   ├── admin/                     // 管理者ページ (未実装)
│   │   └── employee/                  // 従業員ページ (未実装)
│   ├── services/                      // サービス層
│   │   ├── firebase.ts                // Firebase設定
│   │   ├── firestoreService.ts        // Firestore操作共通サービス
│   │   ├── userService.ts             // ユーザー管理サービス
│   │   ├── storeService.ts            // 店舗管理サービス
│   │   ├── shiftService.ts            // シフト管理サービス
│   │   ├── shiftPreferenceService.ts  // シフト希望管理サービス
│   │   ├── attendanceService.ts       // 勤怠管理サービス
│   │   ├── eventService.ts            // イベント・季節情報サービス
│   │   └── aiAssistantService.ts      // AIアシスタントサービス
│   ├── types/                         // TypeScript型定義
│   │   └── models.ts                  // データモデル型定義
│   └── utils/                         // ユーティリティ関数 (未実装)
└── public/                            // 静的ファイル
    ├── index.html                     // HTMLエントリーポイント
    └── electron.js                    // Electron起動スクリプト
```

## 4. これからの開発手順

### 4.1 データコンテキストの実装

#### 4.1.1 DataContext.tsx
1. Firestoreデータの状態管理
2. リアルタイム更新のサブスクリプション
3. キャッシュ管理
4. CRUDオペレーションラッパー
5. データローディング状態の管理

#### 4.1.2 UIContext.tsx
1. モーダル表示状態管理
2. ページローディング状態
3. 通知システム
4. テーマ設定

#### 4.1.3 SeasonalContext.tsx
1. 季節情報とイベントデータの管理
2. 外部データ取得
3. 自動更新処理

### 4.2 管理者ページコンポーネントの実装

#### 4.2.1 Dashboard.tsx
1. 機能アイコン表示
2. 季節情報カード表示
3. 近日イベント一覧
4. シフト集計情報

#### 4.2.2 ShiftCalendar.tsx
1. 月間シフト表示
2. シフト編集機能
3. シフト自動生成
4. シフト希望確認

#### 4.2.3 EmployeeManagement.tsx
1. 従業員一覧
2. 従業員詳細表示/編集
3. 従業員追加
4. スキル設定

#### 4.2.4 StoreManagement.tsx
1. 店舗一覧
2. 店舗詳細表示/編集
3. 店舗追加
4. スキル要件設定

#### 4.2.5 EventsSeasonalManagement.tsx
1. イベント一覧
2. イベント追加/編集
3. 季節情報更新
4. 表示設定

### 4.3 従業員ページコンポーネントの実装

#### 4.3.1 EmployeeProfile.tsx
1. プロフィール表示
2. 個人情報編集
3. パスワード変更

#### 4.3.2 ShiftPreference.tsx
1. 月間カレンダー表示
2. 希望入力フォーム
3. 希望提出状態表示

#### 4.3.3 AttendanceManagement.tsx
1. 勤怠打刻画面
2. 勤務履歴表示
3. 統計情報

### 4.4 フォームコンポーネントの実装

#### 4.4.1 従業員関連フォーム
1. 従業員登録フォーム
2. スキル設定フォーム
3. 人間関係制約設定フォーム

#### 4.4.2 店舗関連フォーム
1. 店舗登録フォーム
2. スキル要件設定フォーム

#### 4.4.3 イベント・季節関連フォーム
1. イベント登録フォーム
2. 季節情報更新フォーム

### 4.5 統合テスト

1. データフローのテスト
2. ユーザー認証フローのテスト
3. シフト自動生成のテスト
4. AIアシスタント統合テスト
5. 画面遷移テスト

### 4.6 最終調整

1. エラーハンドリングの強化
2. パフォーマンス最適化
3. デザイン調整
4. ビルドと実行テスト
5. インストーラー作成

## 5. 開発方針

1. **コンポーネント単位の開発サイクル**
   - 一つのコンポーネントごとに設計・実装・テストを完了させる
   - 小さな単位でコミットし、機能追加を管理する

2. **データフロー重視**
   - データコンテキストを先に実装し、データフローを確立する
   - Firestoreとの連携テストを早期から実施する

3. **段階的な機能拡張**
   - 基本機能を優先実装し、拡張機能は後から追加
   - ユーザーフィードバックを取り入れて機能改善

4. **UI/UX重視**
   - シンプルで操作しやすいインターフェースを心がける
   - 一貫性のあるデザインシステムを適用

5. **テスト駆動開発**
   - テスト用ページを活用して各コンポーネントの動作を検証
   - 実際のユースケースに基づいたテストシナリオを実施
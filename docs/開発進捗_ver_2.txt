# 岩井製菓シフト管理システム 開発進捗報告書

## 1. システム概要

### 1.1 プロジェクト目的
岩井製菓の店舗運営における人員配置の最適化と、シフト作成業務の効率化を図るためのシステムを開発しています。従業員が簡単にシフト希望を提出でき、管理者がそれを考慮したシフト作成を行えるようにします。また、勤怠管理機能も統合し、一元的な労務管理を実現します。

### 1.2 主要機能
- **管理者機能**
  - ダッシュボード (季節情報、イベント情報の表示)
  - シフト管理 (カレンダー表示、自動生成、編集)
  - 従業員管理 (情報登録・編集、スキル設定)
  - 店舗管理 (店舗情報、必要スキル設定)
  - イベント・季節情報管理
  - AIアシスタント (OpenAI APIによる対話型サポート)

- **従業員機能**
  - プロフィール管理
  - シフト希望入力
  - 勤怠管理 (出退勤・休憩打刻)

### 1.3 技術スタック
- フロントエンド: React + TypeScript
- デスクトップ実行環境: Electron
- 認証: Firebase Authentication
- データベース: Firestore
- 状態管理: React Context API
- AI機能: OpenAI API (GPT-4o)
- UI: Material-UI

## 2. 開発進捗状況

### 2.1 完了した開発項目

#### 2.1.1 インフラストラクチャ
- ✅ 開発環境の構築
- ✅ プロジェクトの初期化と基本設定
- ✅ Firebaseとの連携設定
- ✅ ルーティング設定

#### 2.1.2 認証・アクセス制御
- ✅ Firebase Authenticationの実装
- ✅ 認証状態の管理 (AuthContext)
- ✅ ユーザーロールによるアクセス制御
- ✅ ログイン/ログアウト機能

#### 2.1.3 データアクセス層
- ✅ Firestoreサービスの実装 (firestoreService.ts)
- ✅ ユーザー管理サービス (userService.ts)
- ✅ 店舗管理サービス (storeService.ts)
- ✅ シフト管理サービス (shiftService.ts)
- ✅ シフト希望管理サービス (shiftPreferenceService.ts)
- ✅ 勤怠管理サービス (attendanceService.ts)
- ✅ イベント・季節情報サービス (eventService.ts)
- ✅ AIアシスタントサービス (aiAssistantService.ts)

### 2.2 現在の開発フェーズ

現在は、データアクセス層の実装を完了し、UI コンポーネントの開発フェーズに移行する準備が整いました。基本的なサービスとデータフローの基盤ができており、これを活用して実際のユーザーインターフェースを構築していきます。

### 2.3 今後の実装予定
- ⬜ コアUIコンポーネントの開発
- ⬜ 管理者画面の実装
- ⬜ 従業員画面の実装
- ⬜ コンテキストプロバイダーの実装
- ⬜ AIアシスタントUIの実装
- ⬜ シフト自動生成機能の完成

## 3. 現在のプロジェクトフォルダ構造

```
iwai-shift-app/
├── package.json                       // プロジェクト設定、依存関係
├── electron/                          // Electron関連ファイル
│   ├── main.js                        // Electronメインプロセス
│   └── preload.js                     // プリロードスクリプト
├── src/                               // Reactアプリケーションソース
│   ├── index.tsx                      // エントリーポイント
│   ├── App.tsx                        // ルートコンポーネント・ルーティング設定
│   ├── App.css                        // アプリスタイル
│   ├── assets/                        // 画像などの静的アセット
│   ├── components/                    // コンポーネント
│   │   ├── common/                    // 共通コンポーネント
│   │   │   ├── Layout.tsx             // レイアウト共通コンポーネント
│   │   │   └── Sidebar.tsx            // サイドナビゲーション
│   │   ├── admin/                     // 管理者用コンポーネント (未実装)
│   │   └── employee/                  // 従業員用コンポーネント (未実装)
│   ├── contexts/                      // Reactコンテキスト
│   │   └── AuthContext.tsx            // 認証コンテキスト
│   ├── pages/                         // ページコンポーネント
│   │   ├── Login.tsx                  // ログイン画面
│   │   ├── admin/                     // 管理者ページ (未実装)
│   │   └── employee/                  // 従業員ページ (未実装)
│   ├── services/                      // サービス層
│   │   ├── firebase.ts                // Firebase設定
│   │   ├── firestoreService.ts        // Firestore操作共通サービス
│   │   ├── userService.ts             // ユーザー管理サービス
│   │   ├── storeService.ts            // 店舗管理サービス
│   │   ├── shiftService.ts            // シフト管理サービス
│   │   ├── shiftPreferenceService.ts  // シフト希望管理サービス
│   │   ├── attendanceService.ts       // 勤怠管理サービス
│   │   ├── eventService.ts            // イベント・季節情報サービス
│   │   └── aiAssistantService.ts      // AIアシスタントサービス
│   ├── types/                         // TypeScript型定義
│   │   └── models.ts                  // データモデル型定義
│   └── utils/                         // ユーティリティ関数 (未実装)
└── public/                            // 静的ファイル
    ├── index.html                     // HTMLエントリーポイント
    └── electron.js                    // Electron起動スクリプト
```

## 4. 今後の開発手順

### 4.1 コアUIコンポーネントの開発

#### 4.1.1 共通コンポーネント
1. **Calendar.tsx** (カレンダーコンポーネント)
   - 月間カレンダー表示機能
   - 日付選択機能
   - シフト表示レイヤー

2. **DataTable.tsx** (データテーブル)
   - ソート・フィルタ機能
   - ページネーション
   - 行選択機能

3. **Card.tsx** (情報カード)
   - タイトル・コンテンツレイアウト
   - アクションボタン
   - 展開/折りたたみ機能

4. **Modal.tsx** (モーダルダイアログ)
   - コンテンツ表示領域
   - 確認/キャンセルアクション
   - フォーム連携機能

5. **AIAssistant.tsx** (AIアシスタント)
   - チャットインターフェース
   - メッセージ履歴表示
   - 入力フォーム

### 4.2 管理者画面の実装

1. **Dashboard.tsx** (ダッシュボード)
   - 機能アイコン表示
   - 季節情報カード
   - イベント一覧表示

2. **ShiftCalendar.tsx** (シフト管理)
   - 月間シフトカレンダー
   - シフト編集機能
   - シフト自動生成インターフェース

3. **EmployeeManagement.tsx** (従業員管理)
   - 従業員一覧表示
   - 検索・フィルタリング
   - 詳細表示・編集

4. **StoreManagement.tsx** (店舗管理)
   - 店舗一覧表示
   - スキル要件設定
   - 店舗詳細編集

5. **EventManagement.tsx** (イベント・季節情報)
   - イベント一覧表示
   - 季節情報一覧表示
   - 詳細設定フォーム

### 4.3 従業員画面の実装

1. **EmployeeProfile.tsx** (プロフィール)
   - 個人情報表示
   - 編集フォーム
   - プロフィール画像設定

2. **ShiftPreference.tsx** (シフト希望)
   - 月間カレンダー表示
   - 勤務不可日選択
   - 希望設定フォーム

3. **AttendanceManagement.tsx** (勤怠管理)
   - 出退勤打刻UI
   - 休憩開始/終了ボタン
   - 勤務実績表示

### 4.4 コンテキストプロバイダーの実装

1. **DataContext.tsx** (データ状態管理)
   - Firestoreデータの同期管理
   - キャッシュ管理
   - リアルタイム更新

2. **UIContext.tsx** (UI状態管理)
   - モーダル表示状態
   - 選択状態管理
   - ローディング状態

3. **SeasonalContext.tsx** (季節情報コンテキスト)
   - 季節・イベント情報の状態
   - 外部データ取得ロジック
   - 自動更新処理

### 4.5 統合とテスト

1. **Firestoreテストデータ投入**
   - ユーザー、店舗、シフトの初期データ
   - テスト用イベント・季節情報

2. **コンポーネント単体テスト**
   - 各UIコンポーネントの動作確認
   - データバインディングテスト

3. **統合テスト**
   - 画面遷移フロー
   - データ更新フロー
   - エラーハンドリング

4. **AIアシスタント統合テスト**
   - 応答品質テスト
   - 内部データ連携テスト

5. **シフト自動生成テスト**
   - 生成アルゴリズムのテスト
   - 各制約条件の検証

## 5. プロジェクトの進め方

1. **実装優先順位**
   - 共通コンポーネント → 基本画面 → 拡張機能の順に実装
   - 早期から実際のデータ連携を取り入れたデベロップ

2. **開発サイクル**
   - 1コンポーネントごとに完全な実装とテストを行う
   - 小さな機能単位で動作確認を行いながら進める

3. **レビューポイント**
   - 各主要コンポーネント実装後のコードレビュー
   - UIデザインとの整合性確認
   - パフォーマンスチェック

## 6. リスクと対策

1. **OpenAI API連携**
   - リスク: API制限、コスト増加
   - 対策: キャッシュ戦略、通信量の最適化

2. **Firestore同期**
   - リスク: リアルタイム更新の複雑性
   - 対策: 効率的なクエリ設計、適切なキャッシュ

3. **UIパフォーマンス**
   - リスク: レンダリング遅延、メモリ使用量
   - 対策: メモ化、仮想スクロール、遅延読み込み

4. **型安全性**
   - リスク: TypeScriptとFirestoreの型不一致
   - 対策: 適切な型変換、ユーティリティ関数の活用

## 7. まとめ

データアクセス層の実装が完了し、UI開発フェーズへの準備が整いました。要件定義書に沿った機能を段階的に実装していき、使いやすく効率的なシフト管理システムを構築していきます。次のステップでは、コアUIコンポーネントの開発から始め、徐々に機能を拡充していく予定です。

基盤となるデータフローが整っているため、UI開発は比較的スムーズに進行すると予想されます。TypeScriptの型安全性を活かしながら、保守性と拡張性の高いコードベースを維持していきます。s
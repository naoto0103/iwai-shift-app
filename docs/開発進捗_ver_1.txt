# 岩井製菓シフト管理アプリ 開発進捗報告書

## 1. プロジェクト概要

岩井製菓向けのシフト管理システムをElectronフレームワークを用いたWindows向けデスクトップアプリケーションとして開発しています。React + TypeScriptで実装し、Firebase Authentication/Firestoreを活用した認証とデータベース機能を実装中です。

## 2. 現在の進捗状況

### 2.1 完了した開発項目

- ✅ 開発環境の構築
- ✅ プロジェクトの初期化と基本設定
- ✅ Firebaseとの連携設定
- ✅ データモデルの型定義
- ✅ 認証システムの実装
- ✅ 基本レイアウトコンポーネントの実装
- ✅ ログイン画面の実装
- ✅ ルーティング設定
- ✅ 認証情報に基づくルート保護機能

### 2.2 現在のプロジェクトフォルダ構造

```
iwai-shift-app/
├── package.json                     # プロジェクト設定
├── electron/                        # Electron関連ファイル
│   ├── main.js                      # Electronメインプロセス
│   └── preload.js                   # プリロードスクリプト
├── src/                             # Reactアプリケーションソース
│   ├── index.tsx                    # エントリーポイント
│   ├── App.tsx                      # ルートコンポーネント・ルーティング設定
│   ├── App.css                      # アプリスタイル
│   ├── assets/                      # 画像などの静的アセット
│   ├── components/                  # コンポーネント
│   │   ├── common/                  # 共通コンポーネント
│   │   │   ├── Layout.tsx           # レイアウト共通コンポーネント
│   │   │   └── Sidebar.tsx          # サイドナビゲーション
│   │   ├── admin/                   # 管理者用コンポーネント (未実装)
│   │   └── employee/                # 従業員用コンポーネント (未実装)
│   ├── contexts/                    # Reactコンテキスト
│   │   └── AuthContext.tsx          # 認証コンテキスト (実装済)
│   ├── pages/                       # ページコンポーネント
│   │   ├── Login.tsx                # ログイン画面
│   │   ├── admin/                   # 管理者ページ (プレースホルダーのみ)
│   │   └── employee/                # 従業員ページ (プレースホルダーのみ)
│   ├── services/                    # サービス層
│   │   └── firebase.ts              # Firebase設定
│   ├── types/                       # TypeScript型定義
│   │   └── models.ts                # データモデル型定義
│   └── utils/                       # ユーティリティ関数 (未実装)
└── public/                          # 静的ファイル
```

### 2.3 実装済みファイルと機能

#### 2.3.1 Electron設定
- **electron/main.js**: Electronのメインプロセスファイル。ウィンドウの生成と管理を行う。
- **electron/preload.js**: レンダラープロセスとのブリッジ。現在は最小限の設定のみ。

#### 2.3.2 認証システム
- **src/contexts/AuthContext.tsx**: Firebase Authenticationを使った認証システム。
  - ユーザーログイン/ログアウト機能
  - 認証状態の保持と監視
  - Firestoreからのユーザー情報取得

#### 2.3.3 UIコンポーネント
- **src/components/common/Layout.tsx**: アプリケーションの基本レイアウト。
  - サイドバーとメインコンテンツエリアの配置
  - ユーザーモード（管理者/従業員）の状態管理

- **src/components/common/Sidebar.tsx**: サイドナビゲーション。
  - ユーザーロールに応じたメニュー表示
  - 現在のページをハイライト表示
  - 管理者/従業員モードの切り替え
  - ログアウトボタン

#### 2.3.4 ページコンポーネント
- **src/pages/Login.tsx**: ログイン画面。
  - 管理者/従業員タブ切り替え
  - ログインフォーム
  - エラーハンドリング

#### 2.3.5 ルーティングとアプリケーションフレーム
- **src/App.tsx**: アプリのメインコンポーネント。
  - ルーティング設定
  - 認証に基づくルート保護
  - テーマ設定

#### 2.3.6 Firebaseサービス
- **src/services/firebase.ts**: Firebase初期化と各サービスのエクスポート。
  - Firebase Authentication設定
  - Firestore設定
  - Firebase Storage設定

#### 2.3.7 データモデル
- **src/types/models.ts**: アプリケーションのデータ型定義。
  - User, Store, Shift, ShiftPreference, Attendance, Event, SeasonalInfo, RelationshipConstraintなどの型定義

### 2.4 現在の機能と制限

#### 実装済み機能:
- Firebase Authenticationによるログイン/ログアウト
- 認証状態の永続化と保持
- ユーザーロールに基づくアクセス制御（管理者/従業員）
- サイドナビゲーションと基本レイアウト
- 保護されたルーティング

#### 現在の制限:
- ダッシュボードなど実際のページコンテンツは未実装（プレースホルダーのみ）
- 実際のデータ操作機能はまだ実装されていない
- 管理者/従業員の各機能画面は未実装
- AIアシスタント機能は未実装

## 3. 次の開発ステップ

直近の開発として必要な項目は以下の通りです：

### 3.1 管理者機能の実装
1. **ダッシュボード画面の実装**
   - 機能アイコン
   - 季節情報カード
   - イベント一覧表示

2. **シフト管理画面の実装**
   - シフトカレンダー表示
   - シフト希望状況確認
   - 勤怠状況確認

3. **従業員管理画面の実装**
   - 従業員一覧表示
   - 従業員情報編集機能
   - スキルレベル設定

4. **AIアシスタント機能の実装**
   - OpenAI APIとの連携
   - チャットインターフェースの実装
   - 店舗データベースへのアクセス機能
   - 質問応答機能

### 3.2 従業員機能の実装
1. **プロフィール管理画面の実装**
   - プロフィール表示/編集
   - プロフィール画像設定

2. **シフト希望画面の実装**
   - 希望提出カレンダー
   - 勤務不可日設定

3. **勤怠管理画面の実装**
   - 出退勤打刻機能
   - 勤務実績表示

### 3.3 データベース連携の強化
1. **Firestoreのセキュリティルール設定**
2. **CRUDオペレーションの実装**
3. **リアルタイム更新の実装**

### 3.4 拡張機能の実装
1. **イベント・季節情報管理機能**
   - イベント登録・編集・削除
   - 季節情報登録・編集
   - 進捗表示

2. **シフト自動生成機能**
   - 生成条件設定
   - アルゴリズム実装
   - 手動調整機能

## 4. 環境情報

- Node.js: 最新版（npm 11.3.0）
- React, TypeScript: create-react-appで導入
- Electron: 基本設定完了
- Firebase: Authentication, Firestoreを使用

## 5. 現在の課題と解決状況

- ✅ TypeScriptでのFirebaseデータ型変換（Timestamp → Date）の問題は解決済み
- ✅ Material-UIの最新バージョンでのListItem互換性問題は解決済み
- ✅ 自動ログイン/ログアウト機能は実装済み
- ✅ ユーザーロールによるアクセス制御は実装済み